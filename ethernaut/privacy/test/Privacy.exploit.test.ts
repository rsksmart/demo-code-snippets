import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Privacy } from '../typechain-types';
import { BytesLike } from 'ethers';

describe('Privacy', function () {
  let privacy: Privacy;

  async function deploy() {
    const PrivacyFactory = await ethers.getContractFactory('Privacy');
    const messages = [
      `Cat-astrophic humor`,
      `Purrfect punchlines`,
      `Whisker-tickling jokes`,
    ];
    const constructorArgument = messages.map((joke) =>
      ethers.utils.formatBytes32String(joke),
    ) as [BytesLike, BytesLike, BytesLike];
    privacy = await PrivacyFactory.deploy(constructorArgument);
  }

  before(deploy);

  it('Privacy should be locked', async () => {
    expect(await privacy.locked()).to.be.true;
  });

  it('should read value from storage slot at position 5 and unlock Privacy', async () => {
    const slot5 = await ethers.provider.getStorageAt(privacy.address, 5);
    const unlockKey = ethers.utils.hexlify(
      ethers.utils.arrayify(slot5).subarray(0, 16),
    );
    const unlockTx = await privacy.unlock(unlockKey);
    await unlockTx.wait();
    expect(await privacy.locked()).to.be.false;
  });
});
