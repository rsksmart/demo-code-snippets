const hre = require('hardhat');
const solc = require('solc');
const { expect } = require('chai');
const fs = require('fs/promises');

// address of `MegaHonk` smart contract deployed at Rootstock testnet
// 0x499763314C0801437F54F02E1598Ef0Cb452e1Ef

// deployed bytecode taken from Remix artifact
const remixArtifactMegaHonk =
  '608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b57806314274baa14610056575b600080fd5b61004460005481565b60405190815260200160405180910390f35b61005e610060565b005b3332036100a55760405162461bcd60e51b815260206004820152600f60248201526e1153d0481b9bdd08185b1b1bddd959608a1b604482015260640160405180910390fd5b60016000808282546100b791906100e9565b909155505060405132907f99853bc2ae2eab6cfcf41e8d26548f62ad0f8dfb11c576c861f85796efea5a8a90600090a2565b8082018082111561010a57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220b85ebc3b3f14ac022bb0615b2dab9c792a6543f98c00b859fa5da010ac11affa64736f6c63430008110033';

// deployed bytecode taken from RSK testnet explorer page
// https://explorer.testnet.rsk.co/address/0x499763314c0801437f54f02e1598ef0cb452e1ef?__ctab=Code
const rskDeployedMegaHonk =
  '608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b57806314274baa14610056575b600080fd5b61004460005481565b60405190815260200160405180910390f35b61005e610060565b005b3332036100a55760405162461bcd60e51b815260206004820152600f60248201526e1153d0481b9bdd08185b1b1bddd959608a1b604482015260640160405180910390fd5b60016000808282546100b791906100e9565b909155505060405132907f99853bc2ae2eab6cfcf41e8d26548f62ad0f8dfb11c576c861f85796efea5a8a90600090a2565b8082018082111561010a57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220b85ebc3b3f14ac022bb0615b2dab9c792a6543f98c00b859fa5da010ac11affa64736f6c63430008110033';

// get bytecode generated by solc.js compiler
async function getSolcDeployedBytecode(settings) {
  const contract = 'MegaHonk.sol';
  const source = await fs.readFile('./contracts/MegaHonk.sol', 'utf8');
  const solcInput = {
    language: 'Solidity',
    settings,
    sources: {
      [contract]: {
        content: source,
      },
    },
  };
  const output = JSON.parse(solc.compile(JSON.stringify(solcInput)));
  return output.contracts[contract].MegaHonk.evm.deployedBytecode.object;
}

describe('MegaHonk bytecodes', () => {
  // passes
  it('Remix artifact and Rootstock deployed bytecode are identical', async () => {
    expect(remixArtifactMegaHonk).to.equal(rskDeployedMegaHonk);
  });

  // fails
  it('Hardhat artifact and Remix artifact deployed bytecodes are identical', async () => {
    const artifact = await hre.artifacts.readArtifact('MegaHonk');
    expect(artifact.deployedBytecode.substring(2)).to.equal(
      remixArtifactMegaHonk,
    );
  });

  // fails
  it('solc compiler and Remix artifact deployed bytecodes are identical', async () => {
    const compilerSettings = hre.config.solidity.compilers[0].settings;
    const solcDeployedBytecode = await getSolcDeployedBytecode(
      compilerSettings,
    );
    expect(solcDeployedBytecode).to.equal(remixArtifactMegaHonk);
  });

  // fails
  it('solc compiler and Hardhat deployed bytecodes are identical', async () => {
    const artifact = await hre.artifacts.readArtifact('MegaHonk');
    const compilerSettings = hre.config.solidity.compilers[0].settings;
    const solcDeployedBytecode = await getSolcDeployedBytecode(
      compilerSettings,
    );
    expect(solcDeployedBytecode).to.equal(
      artifact.deployedBytecode.substring(2),
    );
  });
});
