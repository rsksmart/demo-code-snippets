import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Recovery, SimpleToken } from '../typechain-types';

describe('Recovery', () => {
  let recovery: Recovery;

  async function deploy() {
    const RecoveryFactory = await ethers.getContractFactory('Recovery');
    recovery = await RecoveryFactory.deploy();
  }

  before(deploy);

  describe('first Simple token was generated by the creator', () => {
    let simpleTokenAddr: string;

    it('creator should generate new token', async () => {
      const tokenName = 'MEOW';
      const tx = await recovery.generateToken(tokenName, 0);
      await expect(tx).to.emit(recovery, 'TokenCreated');
      // get created token address from event
      const filter = recovery.filters.TokenCreated(null);
      const [event] = await recovery.queryFilter(filter);
      simpleTokenAddr = event.args.tokenAddress;
    });

    it('creator should send 0.001 RBTC to generated token', async () => {
      const [creator] = await ethers.getSigners();
      const value = ethers.utils.parseEther('0.001');
      const tx = creator.sendTransaction({
        to: simpleTokenAddr,
        value,
      });
      await expect(() => tx).to.changeEtherBalance(simpleTokenAddr, value);
    });
  });

  describe('since then simple token address was lost', () => {
    let simpleToken: SimpleToken;
    let expectedBalance = ethers.utils.parseEther('0.001');

    it('should recover Simple token address', async () => {
      // token factory nonce before the first token creation
      const nonce = 1;
      // address of the first token created by the token factory:
      const tokenAddress = ethers.utils.getContractAddress({
        from: recovery.address,
        nonce,
      });
      simpleToken = await ethers.getContractAt('SimpleToken', tokenAddress);
      // make sure the address balance is 0.001 RBTC
      expect(await ethers.provider.getBalance(simpleToken.address)).to.equal(
        expectedBalance,
      );
    });

    it('should recover the 0.001 ether from the lost contract address', async () => {
      const [, hacker] = await ethers.getSigners();
      const tx = simpleToken.destroy(hacker.address);
      await expect(() => tx).to.changeEtherBalances(
        [hacker, simpleToken],
        [expectedBalance, expectedBalance.mul(-1)],
      );
    });
  });
});
